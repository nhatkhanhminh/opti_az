const { ethers } = require("hardhat");
const readline = require('readline');

// Contract address - THAY ƒê·ªäA CH·ªà CONTRACT TH·∫¨T
const CONTRACT_ADDRESS = "0x0000000000000000000000000000000000000000";

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  if (CONTRACT_ADDRESS === "0x0000000000000000000000000000000000000000") {
    console.error("‚ùå Vui l√≤ng c·∫≠p nh·∫≠t CONTRACT_ADDRESS trong script!");
    process.exit(1);
  }

  console.log("üöÄ AZC Staking Admin Panel");
  console.log("üìç Contract:", CONTRACT_ADDRESS);

  const AZCStaking = await ethers.getContractFactory("AZCStaking");
  const azcStaking = AZCStaking.attach(CONTRACT_ADDRESS);

  // Ki·ªÉm tra th√¥ng tin c∆° b·∫£n
  try {
    const owner = await azcStaking.owner();
    const azcToken = await azcStaking.AZC_TOKEN();
    const azcPrice = await azcStaking.getAZCPrice();
    
    console.log("üëë Owner:", owner);
    console.log("ü™ô AZC Token:", azcToken);
    console.log("üíµ AZC Price:", ethers.utils.formatEther(azcPrice), "USDT");
  } catch (error) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi contract:", error.message);
    process.exit(1);
  }

  while (true) {
    console.log("\n" + "=".repeat(50));
    console.log("üìã MENU ADMIN:");
    console.log("1. üëÄ Xem t·∫•t c·∫£ Staking Plans");
    console.log("2. üí∞ Set gi√° AZC");
    console.log("3. üìä T·∫°o Staking Plan m·ªõi");
    console.log("4. ‚úèÔ∏è  C·∫≠p nh·∫≠t Staking Plan ho√†n ch·ªânh");
    console.log("5. üîÑ Toggle Plan Active/Inactive");
    console.log("6. üìà C·∫≠p nh·∫≠t % l√£i (ROI) c·ªßa Plan");
    console.log("7. üíµ C·∫≠p nh·∫≠t Min Amount c·ªßa Plan");
    console.log("8. üíµ C·∫≠p nh·∫≠t Min Amount cho t·∫•t c·∫£ Plans");
    console.log("9. ‚ö° Setup Plans m·∫∑c ƒë·ªãnh nhanh (10%, 12%, 16%)");
    console.log("10. üè¶ C·∫≠p nh·∫≠t Wallet Addresses");
    console.log("11. üí∏ C·∫≠p nh·∫≠t Fee Percentages");
    console.log("12. üÜò Emergency Withdraw");
    console.log("0. üö™ Tho√°t");
    console.log("=".repeat(50));

    const choice = await question("Ch·ªçn ch·ª©c nƒÉng (0-12): ");

    try {
      switch (choice) {
        case "1":
          await viewAllPlans(azcStaking);
          break;
        case "2":
          await setAZCPrice(azcStaking);
          break;
        case "3":
          await createNewPlan(azcStaking);
          break;
        case "4":
          await updatePlan(azcStaking);
          break;
        case "5":
          await togglePlan(azcStaking);
          break;
        case "6":
          await updatePlanROI(azcStaking);
          break;
        case "7":
          await updateSinglePlanMinAmount(azcStaking);
          break;
        case "8":
          await updateAllPlansMinAmount(azcStaking);
          break;
        case "9":
          await setupDefaultPlans(azcStaking);
          break;
        case "10":
          await updateWallets(azcStaking);
          break;
        case "11":
          await updateFees(azcStaking);
          break;
        case "12":
          await emergencyWithdraw(azcStaking);
          break;
        case "0":
          console.log("üëã T·∫°m bi·ªát!");
          rl.close();
          return;
        default:
          console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
      }
    } catch (error) {
      console.error("‚ùå L·ªói:", error.message);
    }
  }
}

async function viewAllPlans(azcStaking) {
  console.log("\nüìã TH√îNG TIN T·∫§T C·∫¢ STAKING PLANS:");
  const plans = await azcStaking.getAllStakingPlans();
  
  plans.forEach((plan, index) => {
    console.log(`\nüìä Plan ${index}:`);
    console.log(`   üí∞ Min: $${ethers.utils.formatEther(plan.minAmount)}`);
    console.log(`   üí∞ Max: ${plan.maxAmount.eq(ethers.constants.MaxUint256) ? "‚àû" : "$" + ethers.utils.formatEther(plan.maxAmount)}`);
    console.log(`   üìà ROI: ${plan.monthlyROI / 10}% monthly`);
    console.log(`   ‚úÖ Active: ${plan.active}`);
  });
}

async function setAZCPrice(azcStaking) {
  const currentPrice = await azcStaking.getAZCPrice();
  console.log(`\nüíµ Gi√° hi·ªán t·∫°i: ${ethers.utils.formatEther(currentPrice)} USDT`);
  
  const newPrice = await question("Nh·∫≠p gi√° m·ªõi (USDT): ");
  if (!newPrice || isNaN(parseFloat(newPrice))) {
    console.log("‚ùå Gi√° kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const priceInWei = ethers.utils.parseEther(newPrice);
  const tx = await azcStaking.setAZCPrice(priceInWei);
  await tx.wait();
  
  console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° AZC th√†nh ${newPrice} USDT`);
}

async function createNewPlan(azcStaking) {
  console.log("\nüìä T·∫†O STAKING PLAN M·ªöI:");
  
  const minAmount = await question("Min Amount (USDT): ");
  const maxAmount = await question("Max Amount (USDT, Enter ƒë·ªÉ kh√¥ng gi·ªõi h·∫°n): ");
  const roi = await question("Monthly ROI (%): ");

  if (!minAmount || !roi || isNaN(parseFloat(minAmount)) || isNaN(parseFloat(roi))) {
    console.log("‚ùå Th√¥ng tin kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const minAmountWei = ethers.utils.parseEther(minAmount);
  const maxAmountWei = maxAmount && !isNaN(parseFloat(maxAmount)) 
    ? ethers.utils.parseEther(maxAmount) 
    : ethers.constants.MaxUint256;
  const roiValue = Math.floor(parseFloat(roi) * 10);

  const tx = await azcStaking.createStakingPlan(minAmountWei, maxAmountWei, roiValue);
  await tx.wait();
  
  console.log("‚úÖ ƒê√£ t·∫°o staking plan m·ªõi!");
}

async function updatePlan(azcStaking) {
  await viewAllPlans(azcStaking);
  
  const planId = await question("\nNh·∫≠p Plan ID mu·ªën c·∫≠p nh·∫≠t: ");
  if (!planId || isNaN(parseInt(planId))) {
    console.log("‚ùå Plan ID kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const plan = await azcStaking.stakingPlans(parseInt(planId));
  console.log(`\nTh√¥ng tin hi·ªán t·∫°i c·ªßa Plan ${planId}:`);
  console.log(`Min: $${ethers.utils.formatEther(plan.minAmount)}`);
  console.log(`Max: ${plan.maxAmount.eq(ethers.constants.MaxUint256) ? "‚àû" : "$" + ethers.utils.formatEther(plan.maxAmount)}`);
  console.log(`ROI: ${plan.monthlyROI / 10}%`);
  console.log(`Active: ${plan.active}`);

  const minAmount = await question("Min Amount m·ªõi (USDT): ");
  const maxAmount = await question("Max Amount m·ªõi (USDT, Enter ƒë·ªÉ kh√¥ng gi·ªõi h·∫°n): ");
  const roi = await question("Monthly ROI m·ªõi (%): ");
  const active = await question("Active (true/false): ");

  if (!minAmount || !roi || !active) {
    console.log("‚ùå Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß!");
    return;
  }

  const minAmountWei = ethers.utils.parseEther(minAmount);
  const maxAmountWei = maxAmount && !isNaN(parseFloat(maxAmount)) 
    ? ethers.utils.parseEther(maxAmount) 
    : ethers.constants.MaxUint256;
  const roiValue = Math.floor(parseFloat(roi) * 10);
  const isActive = active.toLowerCase() === 'true';

  const tx = await azcStaking.updateStakingPlan(parseInt(planId), minAmountWei, maxAmountWei, roiValue, isActive);
  await tx.wait();
  
  console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t Plan ${planId}!`);
}

async function togglePlan(azcStaking) {
  await viewAllPlans(azcStaking);
  
  const planId = await question("\nNh·∫≠p Plan ID mu·ªën toggle: ");
  if (!planId || isNaN(parseInt(planId))) {
    console.log("‚ùå Plan ID kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const plan = await azcStaking.stakingPlans(parseInt(planId));
  const newStatus = !plan.active;
  
  const tx = await azcStaking.toggleStakingPlan(parseInt(planId), newStatus);
  await tx.wait();
  
  console.log(`‚úÖ ƒê√£ ${newStatus ? 'k√≠ch ho·∫°t' : 'v√¥ hi·ªáu h√≥a'} Plan ${planId}!`);
}

async function updatePlanROI(azcStaking) {
  await viewAllPlans(azcStaking);
  
  const planId = await question("\nNh·∫≠p Plan ID mu·ªën c·∫≠p nh·∫≠t ROI: ");
  if (!planId || isNaN(parseInt(planId))) {
    console.log("‚ùå Plan ID kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const plan = await azcStaking.stakingPlans(parseInt(planId));
  console.log(`\nROI hi·ªán t·∫°i c·ªßa Plan ${planId}: ${plan.monthlyROI / 10}%`);

  const newROI = await question("Nh·∫≠p % l√£i m·ªõi (v√≠ d·ª•: 15): ");
  if (!newROI || isNaN(parseFloat(newROI))) {
    console.log("‚ùå ROI kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const roiValue = Math.floor(parseFloat(newROI) * 10);
  const tx = await azcStaking.updatePlanROI(parseInt(planId), roiValue);
  await tx.wait();
  
  console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ROI c·ªßa Plan ${planId} th√†nh ${newROI}%!`);
}

async function updateSinglePlanMinAmount(azcStaking) {
  await viewAllPlans(azcStaking);
  
  const planId = await question("\nNh·∫≠p Plan ID mu·ªën c·∫≠p nh·∫≠t Min Amount: ");
  if (!planId || isNaN(parseInt(planId))) {
    console.log("‚ùå Plan ID kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const plan = await azcStaking.stakingPlans(parseInt(planId));
  console.log(`\nMin Amount hi·ªán t·∫°i c·ªßa Plan ${planId}: $${ethers.utils.formatEther(plan.minAmount)}`);

  const newMinAmount = await question("Nh·∫≠p Min Amount m·ªõi (USDT): ");
  if (!newMinAmount || isNaN(parseFloat(newMinAmount))) {
    console.log("‚ùå Min Amount kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const minAmountWei = ethers.utils.parseEther(newMinAmount);
  const tx = await azcStaking.updatePlanMinAmount(parseInt(planId), minAmountWei);
  await tx.wait();
  
  console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t Min Amount c·ªßa Plan ${planId} th√†nh $${newMinAmount}!`);
}

async function updateAllPlansMinAmount(azcStaking) {
  const newMinAmount = await question("Nh·∫≠p Min Amount m·ªõi cho t·∫•t c·∫£ plans (USDT): ");
  if (!newMinAmount || isNaN(parseFloat(newMinAmount))) {
    console.log("‚ùå Min Amount kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const minAmountWei = ethers.utils.parseEther(newMinAmount);
  const tx = await azcStaking.updateAllPlansMinAmount(minAmountWei);
  await tx.wait();
  
  console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t Min Amount th√†nh $${newMinAmount} cho t·∫•t c·∫£ plans!`);
}

async function setupDefaultPlans(azcStaking) {
  const plansCount = await azcStaking.getStakingPlansCount();
  if (plansCount > 0) {
    console.log(`\n‚ö†Ô∏è  Hi·ªán t·∫°i ƒë√£ c√≥ ${plansCount} plans. B·∫°n c√≥ mu·ªën t·∫°o th√™m?`);
    const confirm = await question("Ti·∫øp t·ª•c? (yes/no): ");
    if (confirm.toLowerCase() !== 'yes') {
      console.log("‚ùå ƒê√£ h·ªßy!");
      return;
    }
  }

  const minAmount = await question("Nh·∫≠p Min Amount cho plans m·∫∑c ƒë·ªãnh (m·∫∑c ƒë·ªãnh 99): ");
  const minAmountValue = minAmount ? parseFloat(minAmount) : 99;
  
  if (isNaN(minAmountValue)) {
    console.log("‚ùå Min Amount kh√¥ng h·ª£p l·ªá!");
    return;
  }

  console.log("\n‚ö° ƒêang t·∫°o 3 plans m·∫∑c ƒë·ªãnh...");
  console.log("üìä Plan A: 10% monthly ROI");
  console.log("üìä Plan B: 12% monthly ROI"); 
  console.log("üìä Plan C: 16% monthly ROI");

  const minAmountWei = ethers.utils.parseEther(minAmountValue.toString());
  const maxAmountWei = ethers.constants.MaxUint256; // Kh√¥ng gi·ªõi h·∫°n

  const minAmounts = [minAmountWei, minAmountWei, minAmountWei];
  const maxAmounts = [maxAmountWei, maxAmountWei, maxAmountWei];
  const monthlyROIs = [100, 120, 160]; // 10%, 12%, 16%

  const tx = await azcStaking.createMultipleStakingPlans(minAmounts, maxAmounts, monthlyROIs);
  await tx.wait();
  
  console.log("‚úÖ ƒê√£ t·∫°o 3 plans m·∫∑c ƒë·ªãnh th√†nh c√¥ng!");
  
  // Hi·ªÉn th·ªã plans v·ª´a t·∫°o
  await viewAllPlans(azcStaking);
}

async function updateWallets(azcStaking) {
  console.log("\nüè¶ C·∫¨P NH·∫¨T WALLET ADDRESSES:");
  
  const devWallet = await question("Dev Wallet: ");
  const marketingWallet = await question("Marketing Wallet: ");
  const multiWallet = await question("Multi Wallet: ");
  const poolWallet = await question("Pool Wallet: ");

  if (!devWallet || !marketingWallet || !multiWallet || !poolWallet) {
    console.log("‚ùå Th√¥ng tin wallet kh√¥ng ƒë·∫ßy ƒë·ªß!");
    return;
  }

  const tx = await azcStaking.setWallets(devWallet, marketingWallet, multiWallet, poolWallet);
  await tx.wait();
  
  console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t wallet addresses!");
}

async function updateFees(azcStaking) {
  console.log("\nüí∏ C·∫¨P NH·∫¨T FEE PERCENTAGES:");
  console.log("L∆∞u √Ω: T·ªïng fees kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100%");
  
  const devFee = await question("Dev Fee (%): ");
  const marketingFee = await question("Marketing Fee (%): ");
  const multiFee = await question("Multi Wallet Fee (%): ");
  const leaderFee = await question("Leader Fee (%): ");
  const ref1Fee = await question("Referral L1 Fee (%): ");
  const ref2Fee = await question("Referral L2 Fee (%): ");
  const ref3Fee = await question("Referral L3 Fee (%): ");

  const fees = [devFee, marketingFee, multiFee, leaderFee, ref1Fee, ref2Fee, ref3Fee];
  if (fees.some(fee => !fee || isNaN(parseInt(fee)))) {
    console.log("‚ùå Fee percentages kh√¥ng h·ª£p l·ªá!");
    return;
  }

  const total = fees.reduce((sum, fee) => sum + parseInt(fee), 0);
  if (total > 100) {
    console.log(`‚ùå T·ªïng fees (${total}%) v∆∞·ª£t qu√° 100%!`);
    return;
  }

  const tx = await azcStaking.updateFeePercentages(
    parseInt(devFee),
    parseInt(marketingFee),
    parseInt(multiFee),
    parseInt(leaderFee),
    parseInt(ref1Fee),
    parseInt(ref2Fee),
    parseInt(ref3Fee)
  );
  await tx.wait();
  
  console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t fee percentages!");
}

async function emergencyWithdraw(azcStaking) {
  console.log("\nüÜò EMERGENCY WITHDRAW:");
  console.log("‚ö†Ô∏è  C·∫£nh b√°o: Ch·ª©c nƒÉng n√†y ch·ªâ d√πng trong tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p!");
  
  const tokenAddress = await question("Token Address (0x... ho·∫∑c 'ETH' cho ETH): ");
  const amount = await question("Amount: ");

  if (!tokenAddress || !amount) {
    console.log("‚ùå Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß!");
    return;
  }

  const confirm = await question("B·∫°n c√≥ ch·∫Øc ch·∫Øn? (yes/no): ");
  if (confirm.toLowerCase() !== 'yes') {
    console.log("‚ùå ƒê√£ h·ªßy!");
    return;
  }

  let tx;
  if (tokenAddress.toLowerCase() === 'eth') {
    const amountWei = ethers.utils.parseEther(amount);
    tx = await azcStaking.emergencyWithdrawETH(amountWei);
  } else {
    const amountWei = ethers.utils.parseEther(amount);
    tx = await azcStaking.emergencyWithdraw(tokenAddress, amountWei);
  }
  
  await tx.wait();
  console.log("‚úÖ Emergency withdraw th√†nh c√¥ng!");
}

main().catch(console.error); 